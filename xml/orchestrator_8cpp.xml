<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.9.1" xml:lang="en-US">
    <compounddef id="orchestrator_8cpp" kind="file" language="C++">
        <compoundname>orchestrator.cpp</compoundname>
        <includes refid="orchestrator_8h" local="yes">orchestrator.h</includes>
        <incdepgraph>
            <node id="5">
                <label>foodspawner.h</label>
                <link refid="foodspawner_8h_source"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
            </node>
            <node id="6">
                <label>obstacle.h</label>
                <link refid="obstacle_8h_source"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
            </node>
            <node id="9">
                <label>worker.h</label>
                <link refid="worker_8h_source"/>
                <childnode refid="10" relation="include">
                </childnode>
                <childnode refid="12" relation="include">
                </childnode>
            </node>
            <node id="11">
                <label>egg.h</label>
                <link refid="egg_8h_source"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="12" relation="include">
                </childnode>
            </node>
            <node id="2">
                <label>orchestrator.h</label>
                <link refid="orchestrator_8h_source"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="8" relation="include">
                </childnode>
                <childnode refid="12" relation="include">
                </childnode>
                <childnode refid="13" relation="include">
                </childnode>
            </node>
            <node id="8">
                <label>warrior.h</label>
                <link refid="warrior_8h_source"/>
                <childnode refid="9" relation="include">
                </childnode>
                <childnode refid="13" relation="include">
                </childnode>
            </node>
            <node id="12">
                <label>util.h</label>
                <link refid="util_8h_source"/>
            </node>
            <node id="4">
                <label>vector</label>
            </node>
            <node id="13">
                <label>anthill.h</label>
                <link refid="anthill_8h_source"/>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="12" relation="include">
                </childnode>
                <childnode refid="10" relation="include">
                </childnode>
                <childnode refid="9" relation="include">
                </childnode>
                <childnode refid="11" relation="include">
                </childnode>
            </node>
            <node id="7">
                <label>utility</label>
            </node>
            <node id="10">
                <label>larva.h</label>
                <link refid="larva_8h_source"/>
                <childnode refid="11" relation="include">
                </childnode>
                <childnode refid="12" relation="include">
                </childnode>
            </node>
            <node id="3">
                <label>iostream</label>
            </node>
            <node id="1">
                <label>orchestrator.cpp</label>
                <link refid="orchestrator_8cpp"/>
                <childnode refid="2" relation="include">
                </childnode>
            </node>
        </incdepgraph>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1">
                <highlight class="preprocessor">#include<sp/>&quot;orchestrator.h&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="2">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="3">
                <highlight class="normal">Orchestrator::Orchestrator()</highlight>
            </codeline>
            <codeline lineno="4">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="5">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="6">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="7">
                <highlight class="normal">Orchestrator::Orchestrator(
                    <ref refid="struct_c_o_n_f_i_g" kindref="compound">CONFIG</ref>
                    <sp/>config)
                </highlight>
            </codeline>
            <codeline lineno="8">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="9">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_config<sp/>=<sp/>config;
                </highlight>
            </codeline>
            <codeline lineno="10">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_dimension<sp/>=<sp/>pair&lt;int,<sp/>int&gt;(100,50);
                </highlight>
            </codeline>
            <codeline lineno="11">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Initializing<sp/>the<sp/>grid
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="12">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_grid.resize(_dimension.first);
                </highlight>
            </codeline>
            <codeline lineno="13">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_obstaclesGrid.resize(_dimension.first);
                </highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_foodSpawnersGrid.resize(_dimension.first);
                </highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_anthillsGrid.resize(_dimension.first);
                </highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">unsigned</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_grid.size();<sp/>i++)
                </highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_grid.at(i).resize(_dimension.second);
                </highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_obstaclesGrid.at(i).resize(_dimension.second);
                </highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_foodSpawnersGrid.at(i).resize(_dimension.second);
                </highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_anthillsGrid.at(i).resize(_dimension.second);
                </highlight>
            </codeline>
            <codeline lineno="22">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="23">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Initializing<sp/>grid<sp/>at<sp/>false
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="24">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>x<sp/>=<sp/>0;x<sp/>&lt;<sp/>_dimension.first;x++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="25">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>y<sp/>=<sp/>0;y<sp/>&lt;<sp/>_dimension.second;y++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="26">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_grid.at(x).at(y)<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="27">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_obstaclesGrid.at(x).at(y)<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="28">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_foodSpawnersGrid.at(x).at(y)<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="29">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_anthillsGrid.at(x).at(y)<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="30">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="31">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="32">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="33">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="34">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="35">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="36">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="37">
                <highlight class="normal">Orchestrator::~Orchestrator()</highlight>
            </codeline>
            <codeline lineno="38">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="39">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="40">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="41">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="42">
                <highlight class="normal">pair&lt;int,<sp/>int&gt;<sp/>Orchestrator::getDimension()
                </highlight>
                <highlight class="keyword"><sp/>const
                    <sp/>
                </highlight>
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="43">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>_dimension;
                </highlight>
            </codeline>
            <codeline lineno="44">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="45">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="52">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_orchestrator_1a43534ccc11df40a762dd0305135afd6a" kindref="member">
                        Orchestrator::getMapEntity</ref>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>x,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>y)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="53">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(_grid.at(x).at(y)<sp/>==
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="54">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>1;
                </highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="56">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(_foodSpawnersGrid.at(x).at(y)<sp/>==
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="57">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>3;
                </highlight>
            </codeline>
            <codeline lineno="58">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="59">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(_anthillsGrid.at(x).at(y)<sp/>==
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="60">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>4;
                </highlight>
            </codeline>
            <codeline lineno="61">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="62">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(_obstaclesGrid.at(x).at(y)<sp/>==
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="63">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>2;
                </highlight>
            </codeline>
            <codeline lineno="64">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="65">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//return<sp/>code<sp/>for<sp/>warriors<sp/>:<sp/>5
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="66">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>5;
                </highlight>
            </codeline>
            <codeline lineno="67">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="68">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="73">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_orchestrator_1a8f4d36b247fe79935c10e695c873befc" kindref="member">
                        Orchestrator::initOrch</ref>(
                    <ref refid="struct_c_o_n_f_i_g" kindref="compound">CONFIG</ref>
                    <sp/>config)
                </highlight>
            </codeline>
            <codeline lineno="74">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="75">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\t-<sp/>Init<sp/>Orchestrator<sp/>:<sp/>Environment<sp/>of<sp/>
                    size<sp/>x=&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>_dimension.first<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;<sp/>y=&quot;
                </highlight>
                <highlight class="normal">&lt;&lt;_dimension.second<sp/>&lt;&lt;<sp/>endl;
                </highlight>
            </codeline>
            <codeline lineno="76">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_config<sp/>=<sp/>config;
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
            </codeline>
            <codeline lineno="77">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair<sp/>&lt;int,int&gt;<sp/>anthillPosition<sp/>(_dimension.first/2,_dimension.second/2);
                </highlight>
            </codeline>
            <codeline lineno="78">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>createAnthill(anthillPosition,
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="79">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>initFoodSpawners(_config.nbFoodSpawnerInit);
                </highlight>
            </codeline>
            <codeline lineno="80">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>initObstacles(_config.nbObstacleInit);
                </highlight>
            </codeline>
            <codeline lineno="81">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>initWarriors(_config.nbWarriorInit,<sp/>*_anthills[0]);
                </highlight>
            </codeline>
            <codeline lineno="82">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="83">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="87">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_orchestrator_1abba7d1f0fe26a8fc5f3d8ac5ce00a61a" kindref="member">
                        Orchestrator::doRound</ref>()
                </highlight>
            </codeline>
            <codeline lineno="88">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="89">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_anthills[0]-&gt;doRound();
                </highlight>
            </codeline>
            <codeline lineno="90">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//Iterating<sp/>through<sp/>the<sp/>foodSpawners
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="91">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal">(</highlight>
                <highlight class="keywordtype">unsigned</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>_foodSpawners.size();<sp/>i++)
                </highlight>
            </codeline>
            <codeline lineno="92">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="93">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_foodSpawners[i]-&gt;doRound();
                </highlight>
            </codeline>
            <codeline lineno="94">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="95">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="96">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Iterating<sp/>through<sp/>the<sp/>warriors
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="97">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal">(</highlight>
                <highlight class="keywordtype">unsigned</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>_warriors.size();<sp/>i++)
                </highlight>
            </codeline>
            <codeline lineno="98">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="99">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair&lt;int,int&gt;<sp/>warriorPos<sp/>=<sp/>_warriors[i]-&gt;getPosition();
                </highlight>
            </codeline>
            <codeline lineno="100">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>mode<sp/>=<sp/>_warriors[i]-&gt;getMode();
                </highlight>
            </codeline>
            <codeline lineno="101">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(mode<sp/>==<sp/>1)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="102">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>If<sp/>the<sp/>ant<sp/>is<sp/>in<sp/>exploration<sp/>mode
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="103">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_food_spawner" kindref="compound">FoodSpawner</ref>
                    <sp/>*foodSpawner<sp/>=<sp/>checkFoodNearby(warriorPos.first,<sp/>warriorPos.second);
                </highlight>
            </codeline>
            <codeline lineno="104">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">(foodSpawner<sp/>!=<sp/>NULL)
                </highlight>
            </codeline>
            <codeline lineno="105">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="106">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>takenQuantity<sp/>=<sp/>_warriors[i]-&gt;takeFood(foodSpawner-&gt;getCurrentQuantity());
                </highlight>
            </codeline>
            <codeline lineno="107">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>foodSpawner-&gt;decreaseQuantity(takenQuantity);
                </highlight>
            </codeline>
            <codeline lineno="108">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="109">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_warriors[i]-&gt;explore(getForbiddenPositions(warriorPos.first,<sp/>warriorPos.second));
                </highlight>
            </codeline>
            <codeline lineno="110">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="111">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">(mode<sp/>==<sp/>2)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="112">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_warriors[i]-&gt;returnToAnthill(getForbiddenPositions(warriorPos.first,<sp/>
                    warriorPos.second));
                </highlight>
            </codeline>
            <codeline lineno="113">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="114">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Updating<sp/>the<sp/>grid<sp/>with<sp/>the<sp/>new<sp/>position
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="115">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair&lt;int,int&gt;<sp/>prevPos<sp/>=<sp/>_warriors[i]-&gt;getPrevPos();
                </highlight>
            </codeline>
            <codeline lineno="116">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>setCaseTaken(prevPos.first,<sp/>prevPos.second,
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="117">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>warriorPos<sp/>=<sp/>_warriors[i]-&gt;getPosition();
                </highlight>
            </codeline>
            <codeline lineno="118">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>setCaseTaken(warriorPos.first,<sp/>warriorPos.second,
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="119">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="120">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="121">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="127">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Orchestrator::createAnthill(pair<sp/>&lt;int,int&gt;<sp/>position,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>init)
                </highlight>
            </codeline>
            <codeline lineno="128">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="129">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\t\t*<sp/>Creating<sp/>Anthill<sp/>at<sp/>:<sp/>x=&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>position.first<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;<sp/>y=&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>position.second
                    <sp/>
                    <sp/>&lt;&lt;<sp/>endl;
                </highlight>
            </codeline>
            <codeline lineno="130">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_anthill" kindref="compound">Anthill</ref>
                    <sp/>*anthill<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">new</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_anthill" kindref="compound">Anthill</ref>(_config,<sp/>_config.maxPopAnthill,<sp/>
                    _config.maxFoodAnthill,<sp/>position,<sp/>1,<sp/>1);
                </highlight>
            </codeline>
            <codeline lineno="131">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">(init)</highlight>
            </codeline>
            <codeline lineno="132">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="133">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>anthill-&gt;initAnthill();
                </highlight>
            </codeline>
            <codeline lineno="134">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="135">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_anthills.push_back(anthill);
                </highlight>
            </codeline>
            <codeline lineno="136">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>setCaseTaken(position.first,<sp/>position.second,
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="137">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_anthillsGrid.at(position.first).at(position.second)<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="138">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="139">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="144">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Orchestrator::createFoodSpawner(pair<sp/>&lt;int,int&gt;<sp/>position)
                </highlight>
            </codeline>
            <codeline lineno="145">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="146">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\t\t*<sp/>Creating<sp/>FoodSpawner<sp/>at<sp/>:<sp/>x=&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>position.first<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;<sp/>y=&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>position.second
                    <sp/>
                    <sp/>&lt;&lt;<sp/>endl;
                </highlight>
            </codeline>
            <codeline lineno="147">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_food_spawner" kindref="compound">FoodSpawner</ref>
                    <sp/>*foodSpawner<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">new</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_food_spawner" kindref="compound">FoodSpawner</ref>(_config.maxFoodFoodSpawner,
                    <sp/>position,<sp/>1,<sp/>1);
                </highlight>
            </codeline>
            <codeline lineno="148">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_foodSpawners.push_back(foodSpawner);
                </highlight>
            </codeline>
            <codeline lineno="149">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>setCaseTaken(position.first,<sp/>position.second,
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="150">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_foodSpawnersGrid.at(position.first).at(position.second)<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="151">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="152">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="157">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Orchestrator::initFoodSpawners(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>nbFoodSpawnerInit)
                </highlight>
            </codeline>
            <codeline lineno="158">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="159">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\t\t*<sp/>Creating<sp/>FoodSpawners&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>endl;
                </highlight>
            </codeline>
            <codeline lineno="160">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;i<sp/>&lt;<sp/>nbFoodSpawnerInit;i++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="161">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair<sp/>&lt;int,int&gt;<sp/>foodSpawnerPosition<sp/>=<sp/>getFreePositions().at(rand()<sp/>%
                    <sp/>getFreePositions().size()<sp/>+<sp/>0);
                </highlight>
            </codeline>
            <codeline lineno="162">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>createFoodSpawner(foodSpawnerPosition);
                </highlight>
            </codeline>
            <codeline lineno="163">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="164">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="165">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="170">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Orchestrator::createObstacle(pair<sp/>&lt;int,int&gt;<sp/>position)
                </highlight>
            </codeline>
            <codeline lineno="171">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="172">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\t\t*<sp/>Creating<sp/>Obstacle<sp/>at<sp/>:<sp/>x=&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>position.first<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;<sp/>y=&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>position.second
                    <sp/>
                    <sp/>&lt;&lt;<sp/>endl;
                </highlight>
            </codeline>
            <codeline lineno="173">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_obstacle" kindref="compound">Obstacle</ref>
                    <sp/>*obstacle<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">new</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_obstacle" kindref="compound">Obstacle</ref>(position,<sp/>1,<sp/>1);
                </highlight>
            </codeline>
            <codeline lineno="174">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_obstacles.push_back(obstacle);
                </highlight>
            </codeline>
            <codeline lineno="175">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>setCaseTaken(position.first,<sp/>position.second,
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="176">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_obstaclesGrid.at(position.first).at(position.second)<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="177">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="178">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="183">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Orchestrator::initObstacles(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>nbObstacleInit)
                </highlight>
            </codeline>
            <codeline lineno="184">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="185">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\t\t*<sp/>Creating<sp/>obstacles&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>endl;
                </highlight>
            </codeline>
            <codeline lineno="186">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;i<sp/>&lt;<sp/>nbObstacleInit;i++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="187">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair<sp/>&lt;int,int&gt;<sp/>obstaclePosition<sp/>=<sp/>getFreePositions().at(rand()<sp/>%<sp/>
                    getFreePositions().size()<sp/>+<sp/>0);
                </highlight>
            </codeline>
            <codeline lineno="188">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>createObstacle(obstaclePosition);
                </highlight>
            </codeline>
            <codeline lineno="189">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="190">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="191">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="197">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Orchestrator::initWarriors(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>nbWarriorInit,
                    <sp/>
                    <ref refid="class_anthill" kindref="compound">Anthill</ref>
                    <sp/>&amp;anthill)
                </highlight>
            </codeline>
            <codeline lineno="198">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="199">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\t\t*<sp/>Creating<sp/>warriors&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>endl;
                </highlight>
            </codeline>
            <codeline lineno="200">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;i<sp/>&lt;<sp/>nbWarriorInit;i++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="201">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>vector&lt;pair&lt;int,int&gt;&gt;<sp/>warriorsFreePositions<sp/>=<sp/>
                    getWarriorsFreePositions(anthill);
                </highlight>
            </codeline>
            <codeline lineno="202">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!warriorsFreePositions.empty())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="203">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair<sp/>&lt;int,int&gt;<sp/>warriorPosition<sp/>=<sp/>warriorsFreePositions.at(rand()<sp/>%
                    <sp/>warriorsFreePositions.size()<sp/>+<sp/>0);
                </highlight>
            </codeline>
            <codeline lineno="204">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>createWarrior(warriorPosition,<sp/>anthill);
                </highlight>
            </codeline>
            <codeline lineno="205">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="206">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="207">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\t\t*<sp/>Unable<sp/>to<sp/>create<sp/>warrior,<sp/>no<sp/>more
                    <sp/>positions<sp/>available&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>endl;
                </highlight>
            </codeline>
            <codeline lineno="208">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="209">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="210">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="211">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="217">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Orchestrator::createWarrior(pair<sp/>&lt;int,int&gt;<sp/>position,
                    <sp/>
                    <ref refid="class_anthill" kindref="compound">Anthill</ref>
                    <sp/>&amp;anthill)
                </highlight>
            </codeline>
            <codeline lineno="218">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="219">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;\t\t*<sp/>Creating<sp/>Warrior<sp/>at<sp/>:
                    <sp/>x=&quot;<sp/>&lt;&lt;<sp/>position.first<sp/>&lt;&lt;<sp/>&quot;<sp/>y=&quot;<sp/>&lt;&lt;<sp/>
                    position.second
                    <sp/>
                    <sp/>&lt;&lt;<sp/>endl;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="220">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">string</highlight>
                <highlight class="normal"><sp/>name<sp/>=
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;warrior&quot;</highlight>
                <highlight class="normal"><sp/>+<sp/>to_string(_warriors.size());
                </highlight>
            </codeline>
            <codeline lineno="221">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="class_warrior" kindref="compound">Warrior</ref>
                    <sp/>*warrior<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">new</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="class_warrior" kindref="compound">Warrior</ref>(_config.capacityWarrior,<sp/>position,
                    <sp/>name,<sp/>anthill,<sp/>_config);
                </highlight>
            </codeline>
            <codeline lineno="222">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_warriors.push_back(warrior);
                </highlight>
            </codeline>
            <codeline lineno="223">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>setCaseTaken(position.first,<sp/>position.second,
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="224">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="225">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="230">
                <highlight class="normal">vector&lt;pair<sp/>&lt;int,<sp/>int&gt;&gt;<sp/>
                    Orchestrator::getFreePositions()
                </highlight>
            </codeline>
            <codeline lineno="231">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="232">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>vector&lt;pair<sp/>&lt;int,<sp/>int&gt;&gt;<sp/>freePositions;
                </highlight>
            </codeline>
            <codeline lineno="233">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="234">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>x<sp/>=<sp/>0;x<sp/>&lt;<sp/>_dimension.first;x++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="235">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>y<sp/>=<sp/>0;y<sp/>&lt;<sp/>_dimension.second;y++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="236">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(isCaseTaken(x,y)<sp/>==
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="237">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair<sp/>&lt;int,int&gt;<sp/>freePosition<sp/>(x,y);
                </highlight>
            </codeline>
            <codeline lineno="238">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>freePositions.push_back(freePosition);
                </highlight>
            </codeline>
            <codeline lineno="239">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="240">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="241">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="242">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="243">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>freePositions;
                </highlight>
            </codeline>
            <codeline lineno="244">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="245">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="252">
                <highlight class="normal">vector&lt;pair&lt;int,int&gt;&gt;<sp/>Orchestrator::getForbiddenPositions(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>x,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>y)
                </highlight>
            </codeline>
            <codeline lineno="253">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="254">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>vector&lt;pair&lt;int,int&gt;&gt;<sp/>forbiddenPositions;
                </highlight>
            </codeline>
            <codeline lineno="255">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">(isCaseTaken(x-1,y))</highlight>
            </codeline>
            <codeline lineno="256">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="257">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair&lt;int,int&gt;<sp/>forbidden(x-1,y);
                </highlight>
            </codeline>
            <codeline lineno="258">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>forbiddenPositions.push_back(forbidden);
                </highlight>
            </codeline>
            <codeline lineno="259">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="260">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">(isCaseTaken(x+1,y))</highlight>
            </codeline>
            <codeline lineno="261">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="262">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair&lt;int,int&gt;<sp/>forbidden(x+1,y);
                </highlight>
            </codeline>
            <codeline lineno="263">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>forbiddenPositions.push_back(forbidden);
                </highlight>
            </codeline>
            <codeline lineno="264">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="265">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">(isCaseTaken(x,y-1))</highlight>
            </codeline>
            <codeline lineno="266">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="267">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair&lt;int,int&gt;<sp/>forbidden(x,y-1);
                </highlight>
            </codeline>
            <codeline lineno="268">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>forbiddenPositions.push_back(forbidden);
                </highlight>
            </codeline>
            <codeline lineno="269">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="270">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">(isCaseTaken(x,y+1))</highlight>
            </codeline>
            <codeline lineno="271">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="272">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair&lt;int,int&gt;<sp/>forbidden(x,y+1);
                </highlight>
            </codeline>
            <codeline lineno="273">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>forbiddenPositions.push_back(forbidden);
                </highlight>
            </codeline>
            <codeline lineno="274">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="275">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>forbiddenPositions;
                </highlight>
            </codeline>
            <codeline lineno="276">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="277">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="284">
                <highlight class="normal"><ref refid="class_food_spawner" kindref="compound">FoodSpawner</ref>*<sp/>
                    Orchestrator::checkFoodNearby(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>x,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>y)
                </highlight>
            </codeline>
            <codeline lineno="285">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="286">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">unsigned</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_foodSpawners.size();<sp/>i++)
                </highlight>
            </codeline>
            <codeline lineno="287">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="288">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair&lt;int,int&gt;<sp/>foodPos<sp/>=<sp/>_foodSpawners[i]-&gt;getPosition();
                </highlight>
            </codeline>
            <codeline lineno="289">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(isNextTo(x,y,<sp/>foodPos.first,<sp/>foodPos.second))
                </highlight>
            </codeline>
            <codeline lineno="290">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="291">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>_foodSpawners[i];
                </highlight>
            </codeline>
            <codeline lineno="292">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="293">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="294">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>NULL;
                </highlight>
            </codeline>
            <codeline lineno="295">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="296">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="303">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>Orchestrator::isCaseTaken(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>x,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>y)
                </highlight>
            </codeline>
            <codeline lineno="304">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="305">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">((x<sp/>&lt;<sp/>_dimension.first<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>
                    (y<sp/>&lt;<sp/>_dimension.second<sp/>&amp;&amp;<sp/>y<sp/>&gt;=<sp/>0))
                </highlight>
            </codeline>
            <codeline lineno="306">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="307">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>_grid.at(x).at(y);
                </highlight>
            </codeline>
            <codeline lineno="308">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="309">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="310">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="311">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="312">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="313">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="320">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>Orchestrator::setCaseTaken(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>x,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>y,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>taken)
                </highlight>
            </codeline>
            <codeline lineno="321">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="322">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal">((x<sp/>&lt;<sp/>_dimension.first<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>
                    (y<sp/>&lt;<sp/>_dimension.second<sp/>&amp;&amp;<sp/>y<sp/>&gt;=<sp/>0))
                </highlight>
            </codeline>
            <codeline lineno="323">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="324">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>_grid.at(x).at(y)<sp/>=<sp/>taken;
                </highlight>
            </codeline>
            <codeline lineno="325">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="326">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="327">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="336">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>Orchestrator::isNextTo(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>antX,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>antY,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>objX,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>objY)
                </highlight>
            </codeline>
            <codeline lineno="337">
                <highlight class="normal">{</highlight>
            </codeline>
            <codeline lineno="338">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>((objX<sp/>==<sp/>antX+1<sp/>&amp;&amp;<sp/>objY<sp/>==<sp/>antY)<sp/>||
                    <sp/>(objX<sp/>==<sp/>antX-1<sp/>&amp;&amp;<sp/>objY<sp/>==<sp/>antY)<sp/>||<sp/>(objX<sp/>==<sp/>
                    antX<sp/>&amp;&amp;<sp/>objY<sp/>==<sp/>antY+1)<sp/>||<sp/>(objX<sp/>==<sp/>antX<sp/>&amp;&amp;<sp/>
                    objY<sp/>==<sp/>antY-1))
                </highlight>
            </codeline>
            <codeline lineno="339">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="340">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="341">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="342">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="343">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="344">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="350">
                <highlight class="normal">vector&lt;pair<sp/>&lt;int,int&gt;&gt;<sp/>
                    Orchestrator::getWarriorsFreePositions(
                    <ref refid="class_anthill" kindref="compound">Anthill</ref>
                    <sp/>&amp;anthill)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="351">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>vector&lt;pair<sp/>&lt;int,int&gt;&gt;<sp/>warriorsFreePositions;
                </highlight>
            </codeline>
            <codeline lineno="352">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>vector&lt;pair<sp/>&lt;int,int&gt;&gt;<sp/>freePositions<sp/>=<sp/>getFreePositions();
                </highlight>
            </codeline>
            <codeline lineno="353">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair<sp/>&lt;int,int&gt;<sp/>anthillPosition<sp/>=<sp/>anthill.getPosition();
                </highlight>
            </codeline>
            <codeline lineno="354">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>vector&lt;pair<sp/>&lt;int,int&gt;&gt;<sp/>nearbyPositions{pair<sp/>&lt;int,int&gt;<sp/>
                    (anthillPosition.first-1,<sp/>anthillPosition.second),<sp/>pair<sp/>&lt;int,int&gt;<sp/>
                    (anthillPosition.first-1,<sp/>anthillPosition.second-1),<sp/>pair<sp/>&lt;int,int&gt;<sp/>
                    (anthillPosition.first-1,<sp/>anthillPosition.second+1),<sp/>pair<sp/>&lt;int,int&gt;<sp/>
                    (anthillPosition.first+1,<sp/>anthillPosition.second),<sp/>pair<sp/>&lt;int,int&gt;<sp/>
                    (anthillPosition.first+1,<sp/>anthillPosition.second-1),<sp/>pair<sp/>&lt;int,int&gt;<sp/>
                    (anthillPosition.first+1,<sp/>anthillPosition.second+1),<sp/>pair<sp/>&lt;int,int&gt;<sp/>
                    (anthillPosition.first,<sp/>anthillPosition.second-1),<sp/>pair<sp/>&lt;int,int&gt;<sp/>
                    (anthillPosition.first,<sp/>anthillPosition.second+1)};
                </highlight>
            </codeline>
            <codeline lineno="355">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>x<sp/>=<sp/>0;x<sp/>&lt;<sp/>int(freePositions.size());x++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="356">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair<sp/>&lt;int,int&gt;<sp/>freePosition<sp/>=<sp/>freePositions.at(x);
                </highlight>
            </codeline>
            <codeline lineno="357">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">int</highlight>
                <highlight class="normal"><sp/>y<sp/>=<sp/>0;y<sp/>&lt;<sp/>int(nearbyPositions.size());y++)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="358">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>pair<sp/>&lt;int,int&gt;<sp/>nearbyPosition<sp/>=<sp/>nearbyPositions.at(y);
                </highlight>
            </codeline>
            <codeline lineno="359">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(freePosition<sp/>==<sp/>nearbyPosition)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="360">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>warriorsFreePositions.push_back(freePosition);
                </highlight>
            </codeline>
            <codeline lineno="361">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="362">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="363">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="364">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>warriorsFreePositions;
                </highlight>
            </codeline>
            <codeline lineno="365">
                <highlight class="normal">}</highlight>
            </codeline>
        </programlisting>
        <location file="orchestrator.cpp"/>
    </compounddef>
</doxygen>
